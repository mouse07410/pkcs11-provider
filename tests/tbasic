#!/bin/bash -e
# Copyright (C) 2022 Simo Sorce <simo@redhat.com>
# SPDX-License-Identifier: Apache-2.0

source ${TESTSSRCDIR}/helpers.sh

TSTOUT="${TMPPDIR}/testout"

title PARA "Export Public key to a file"
ossl 'pkey -in $BASEURI -pubin -pubout -out ${TSTOUT}.pub'
title LINE "Export Public key to a file (pub-uri)"
ossl 'pkey -in $PUBURI -pubin -pubout -out ${TSTOUT}.pub'
title LINE "Export Public key to a file (with pin)"
ossl 'pkey -in $BASEURIWITHPIN -pubin -pubout -out ${TSTOUT}.pub'
title LINE "Print Public key from private"
ossl 'pkey -in $PRIURI -pubout -text' output
FAIL=0
echo $output | grep "PKCS11 RSA Public Key (2048 bits)" > /dev/null 2>&1 || FAIL=1
if [ $FAIL -eq 1 ]; then
    echo "Pkcs11 encoder function failed"
    echo
    echo "Original command output:"
    echo "$output"
    echo
fi

title PARA "Export Public check error"
FAIL=0
ossl 'pkey -in pkcs11:id=%de%ad -pubin
           -pubout -out ${TSTOUT}-invlid.pub' || FAIL=1
if [ $FAIL -eq 0 ]; then
    echo "Invalid pkcs11 uri resulted in no error exporting key"
    exit 1
fi

title PARA "Raw Sign check error"
dd if=/dev/urandom of=${TMPPDIR}/64Brandom.bin bs=64 count=1 >/dev/null 2>&1
FAIL=0
ossl '
pkeyutl -sign -inkey "${BASEURI}"
              -pkeyopt pad-mode:none
              -in ${TMPPDIR}/64Brandom.bin
              -out ${TMPPDIR}/raw-sig.bin' || FAIL=1
if [ $FAIL -eq 0 ]; then
    echo "Raw signature should not allow data != modulus size"
    exit 1
fi
# unfortunately pkeyutl simply does not make it possible to sign anything
# that is bigger than a hash, which means we'd need a very small RSA key
# to really check a raw signature through pkeyutl

title PARA "Sign and Verify with provided Hash and RSA"
ossl 'dgst -sha256 -binary -out ${TMPPDIR}/sha256.bin ${SEEDFILE}'
ossl '
pkeyutl -sign -inkey "${PRIURI}"
              -in ${TMPPDIR}/sha256.bin
              -out ${TMPPDIR}/sha256-sig.bin'

ossl '
pkeyutl -verify -inkey "${PUBURI}"
                -pubin
                -in ${TMPPDIR}/sha256.bin
                -sigfile ${TMPPDIR}/sha256-sig.bin'

title PARA "Sign and Verify with provided Hash and RSA with DigestInfo struct"
ossl 'dgst -sha256 -binary -out ${TMPPDIR}/sha256.bin ${SEEDFILE}'
ossl '
pkeyutl -sign -inkey "${PRIURI}" -pkeyopt digest:sha256
              -in ${TMPPDIR}/sha256.bin
              -out ${TMPPDIR}/sha256-sig.bin'

ossl '
pkeyutl -verify -inkey "${PUBURI}" -pkeyopt digest:sha256
                -pubin
                -in ${TMPPDIR}/sha256.bin
                -sigfile ${TMPPDIR}/sha256-sig.bin'

title PARA "DigestSign and DigestVerify with RSA"
ossl '
pkeyutl -sign -inkey "${BASEURI}"
              -digest sha256
              -in ${RAND64FILE}
              -rawin
              -out ${TMPPDIR}/sha256-dgstsig.bin'
ossl '
pkeyutl -verify -inkey "${BASEURI}" -pubin
                -digest sha256
                -in ${RAND64FILE}
                -rawin
                -sigfile ${TMPPDIR}/sha256-dgstsig.bin'
ossl '
pkeyutl -verify -inkey "${PUBURI}"
                -pubin
                -digest sha256
                -in ${RAND64FILE}
                -rawin
                -sigfile ${TMPPDIR}/sha256-dgstsig.bin'


SECRETFILE=${TMPPDIR}/rsasecret.txt
echo "Super Secret" > ${SECRETFILE}

title LINE "RSA basic encrypt and decrypt"
ossl '
pkeyutl -encrypt -inkey "${PUBURI}" -pubin
                 -in ${SECRETFILE}
                 -out ${SECRETFILE}.enc'
ossl '
pkeyutl -decrypt -inkey "${PRIURI}"
                 -in ${SECRETFILE}.enc
                 -out ${SECRETFILE}.dec'
diff ${SECRETFILE} ${SECRETFILE}.dec

title PARA "Test Disallow Public Export"
ORIG_OPENSSL_CONF=${OPENSSL_CONF}
sed "s/#pkcs11-module-allow-export/pkcs11-module-allow-export = 1/" ${OPENSSL_CONF} > ${OPENSSL_CONF}.noexport
OPENSSL_CONF=${OPENSSL_CONF}.noexport
ossl 'pkey -in $PUBURI -pubin -pubout -text' output
FAIL=0
echo "$output" | grep "^PKCS11 RSA Public Key (2048 bits)" > /dev/null 2>&1 || FAIL=1
if [ $FAIL -ne 0 ]; then
    echo "$output" | grep "PUBLIC KEY" > /dev/null 2>&1 || FAIL=2
fi
if [ $FAIL -eq 1 ]; then
    echo "pkcs11 pem export failed"
fi
if [ $FAIL -eq 2 ]; then
    echo "pkcs11 pem export succeeded but internal encoder was not used"
fi
if [ $FAIL -ne 0 ]; then
    echo
    echo "Original command output:"
    echo "$output"
    echo
    exit 1
fi
OPENSSL_CONF=${ORIG_OPENSSL_CONF}
rm -f ${OPENSSL_CONF}.noexport

title PARA "Test CSR generation from RSA private keys"
ossl '
req -new -batch -key "${PRIURI}" -out ${TMPPDIR}/rsa_csr.pem'
ossl '
req -in ${TMPPDIR}/rsa_csr.pem -verify -noout'

title PARA "Test fetching public keys without PIN in config files"
ORIG_OPENSSL_CONF=${OPENSSL_CONF}
sed "s/^pkcs11-module-token-pin.*$/##nopin/" ${OPENSSL_CONF} > ${OPENSSL_CONF}.nopin
OPENSSL_CONF=${OPENSSL_CONF}.nopin
ossl 'pkey -in $PUBURI -pubin -pubout -out ${TMPPDIR}/rsa.pub.nopin.pem'
ossl 'pkey -in $ECPUBURI -pubin -pubout -out ${TMPPDIR}/ec.pub.nopin.pem'

title PARA "Test prompting without PIN in config files"
output=`expect -c "spawn -noecho openssl pkey -in \"${PRIURI}\" -text -noout;
                   expect \"Enter pass phrase for PKCS#11 Token (Slot *:\";
                   send \"${PINVALUE}\r\";
                   expect \"Key ID:\";"`
echo "$output" | grep "Enter pass phrase for PKCS#11 Token (Slot .*):" > /dev/null 2>&1 || FAIL=1
if [ $FAIL -eq 0 ]; then
    echo "$output" | grep "PKCS11 RSA Public Key" > /dev/null 2>&1 || FAIL=2
fi
if [ $FAIL -eq 1 ]; then
    echo "Failed to obtain expected prompt"
fi
if [ $FAIL -eq 2 ]; then
    echo "Failed to get expected command output"
fi
if [ $FAIL -ne 0 ]; then
    echo
    echo "Original command output:"
    echo "$output"
    echo
    exit 1
fi

OPENSSL_CONF=${ORIG_OPENSSL_CONF}
rm -f ${OPENSSL_CONF}.nopin

exit 0
